; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	C:\Users\bewew\Desktop\A3\CIS 450\Assignment 3\Wewer_Blake\Question3\question3.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_gc:BYTE
COMM	_gi:DWORD
_DATA	ENDS
_DATA	SEGMENT
$SG4520	DB	'gc = %d', 09H, 'gi = %d', 09H, 'mi = %d', 0aH, 00H
	ORG $+3
$SG4531	DB	'i1 = %d', 09H, 'i2 = %d', 09H, 'i3 = %d', 09H, 'i4 = %d', 0aH
	DB	00H
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	_g
PUBLIC	_f
PUBLIC	_main
EXTRN	___acrt_iob_func:PROC
EXTRN	___stdio_common_vfprintf:PROC
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
; Function compile flags: /Odtp
; File c:\users\bewew\desktop\a3\cis 450\assignment 3\wewer_blake\question3\question3.c
_TEXT	SEGMENT
_mi$ = -4						; size = 4
_main	PROC

; 9    : void main() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 10   : 	int mi = g(126, 23, 126, 3);

  00004	6a 03		 push	 3
  00006	6a 7e		 push	 126			; 0000007eH
  00008	6a 17		 push	 23			; 00000017H
  0000a	6a 7e		 push	 126			; 0000007eH
  0000c	e8 00 00 00 00	 call	 _g
  00011	83 c4 10	 add	 esp, 16			; 00000010H
  00014	89 45 fc	 mov	 DWORD PTR _mi$[ebp], eax

; 11   : 	printf("gc = %d\tgi = %d\tmi = %d\n", gc, gi, mi);

  00017	8b 45 fc	 mov	 eax, DWORD PTR _mi$[ebp]
  0001a	50		 push	 eax
  0001b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _gi
  00021	51		 push	 ecx
  00022	0f be 15 00 00
	00 00		 movsx	 edx, BYTE PTR _gc
  00029	52		 push	 edx
  0002a	68 00 00 00 00	 push	 OFFSET $SG4520
  0002f	e8 00 00 00 00	 call	 _printf
  00034	83 c4 10	 add	 esp, 16			; 00000010H

; 12   : }

  00037	33 c0		 xor	 eax, eax
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\bewew\desktop\a3\cis 450\assignment 3\wewer_blake\question3\question3.c
_TEXT	SEGMENT
_i1$ = 8						; size = 4
_i2$ = 12						; size = 4
_i3$ = 16						; size = 4
_i4$ = 20						; size = 4
_f	PROC

; 59   : int f(int i1, int i2, int i3, int i4) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 60   : 	printf("i1 = %d\ti2 = %d\ti3 = %d\ti4 = %d\n", i1, i2, i3, i4);

  00003	8b 45 14	 mov	 eax, DWORD PTR _i4$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 10	 mov	 ecx, DWORD PTR _i3$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 0c	 mov	 edx, DWORD PTR _i2$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 08	 mov	 eax, DWORD PTR _i1$[ebp]
  00012	50		 push	 eax
  00013	68 00 00 00 00	 push	 OFFSET $SG4531
  00018	e8 00 00 00 00	 call	 _printf
  0001d	83 c4 14	 add	 esp, 20			; 00000014H

; 61   : 	return i1*2 + i2 + i3 + i4;

  00020	8b 4d 08	 mov	 ecx, DWORD PTR _i1$[ebp]
  00023	8b 55 0c	 mov	 edx, DWORD PTR _i2$[ebp]
  00026	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00029	03 45 10	 add	 eax, DWORD PTR _i3$[ebp]
  0002c	03 45 14	 add	 eax, DWORD PTR _i4$[ebp]

; 62   : }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_f	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\bewew\desktop\a3\cis 450\assignment 3\wewer_blake\question3\question3.c
_TEXT	SEGMENT
_g	PROC

; 15   : int g() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 16   : 	_asm {
; 17   : 		// complete your assembly program here
; 18   : 		
; 19   : 		//Allocate local variables "short s1" and "unsigned char uc1"
; 20   : 		// c = [ebp+8]
; 21   : 		// s = [ebp+12]
; 22   : 		// uc = [ebp+16]
; 23   : 		// i = [ebp+20]
; 24   : 		sub esp, 8

  00003	83 ec 08	 sub	 esp, 8

; 25   : 		//Assign c+5 to gc, s + 10 to s1, uc + 5 to uc1, and i to gi
; 26   : 		movsx eax, DWORD PTR[ebp+8]

  00006	0f be 45 08	 movsx	 eax, BYTE PTR [ebp+8]

; 27   : 		add eax, 5

  0000a	83 c0 05	 add	 eax, 5

; 28   : 		mov DWORD PTR gc, eax

  0000d	a3 00 00 00 00	 mov	 DWORD PTR _gc, eax

; 29   : 		
; 30   : 		movsx eax, DWORD PTR[ebp+12]

  00012	0f be 45 0c	 movsx	 eax, BYTE PTR [ebp+12]

; 31   : 		add eax, 10

  00016	83 c0 0a	 add	 eax, 10			; 0000000aH

; 32   : 		mov DWORD PTR[esp+2], eax

  00019	89 44 24 02	 mov	 DWORD PTR [esp+2], eax

; 33   : 		
; 34   : 		movzx eax, DWORD PTR[ebp+16]

  0001d	0f b6 45 10	 movzx	 eax, BYTE PTR [ebp+16]

; 35   : 		add eax, 5

  00021	83 c0 05	 add	 eax, 5

; 36   : 		mov DWORD PTR[esp+3], eax

  00024	89 44 24 03	 mov	 DWORD PTR [esp+3], eax

; 37   : 		
; 38   : 		mov eax, DWORD PTR[ebp+20]

  00028	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]

; 39   : 		mov DWORD PTR gi, eax

  0002b	a3 00 00 00 00	 mov	 DWORD PTR _gi, eax

; 40   : 		
; 41   : 		//call f with gc, s1, uc1, gi in this order
; 42   : 		mov eax, DWORD PTR gi

  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR _gi

; 43   : 		push eax

  00035	50		 push	 eax

; 44   : 		mov eax, DWORD PTR[esp+8]

  00036	8b 44 24 08	 mov	 eax, DWORD PTR [esp+8]

; 45   : 		push eax

  0003a	50		 push	 eax

; 46   : 		mov eax, DWORD PTR[esp+4]

  0003b	8b 44 24 04	 mov	 eax, DWORD PTR [esp+4]

; 47   : 		push eax

  0003f	50		 push	 eax

; 48   : 		mov eax, DWORD PTR gc

  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR _gc

; 49   : 		push eax

  00045	50		 push	 eax

; 50   : 		call f

  00046	e8 00 00 00 00	 call	 _f

; 51   : 	
; 52   : 		//return the return value of invocation of f
; 53   : 		
; 54   : 		add esp, 8

  0004b	83 c4 08	 add	 esp, 8

; 55   : 		mov esp, ebp

  0004e	8b e5		 mov	 esp, ebp

; 56   : 	}
; 57   : }

  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
_g	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__ArgList$ = -4						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 952  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 953  :         int _Result;
; 954  :         va_list _ArgList;
; 955  :         __crt_va_start(_ArgList, _Format);

  00006	8d 45 0c	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00009	89 45 fc	 mov	 DWORD PTR __ArgList$[ebp], eax

; 956  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR __ArgList$[ebp]
  0000f	51		 push	 ecx
  00010	6a 00		 push	 0
  00012	8b 55 08	 mov	 edx, DWORD PTR __Format$[ebp]
  00015	52		 push	 edx
  00016	6a 01		 push	 1
  00018	e8 00 00 00 00	 call	 ___acrt_iob_func
  0001d	83 c4 04	 add	 esp, 4
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 __vfprintf_l
  00026	83 c4 10	 add	 esp, 16			; 00000010H
  00029	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 957  :         __crt_va_end(_ArgList);

  0002c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 958  :         return _Result;

  00033	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 959  :     }

  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 640  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 641  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00003	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00018	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001b	51		 push	 ecx
  0001c	8b 10		 mov	 edx, DWORD PTR [eax]
  0001e	52		 push	 edx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vfprintf
  00024	83 c4 18	 add	 esp, 24			; 00000018H

; 642  :     }

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 85   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 86   :         static unsigned __int64 _OptionsStorage;
; 87   :         return &_OptionsStorage;

  00003	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 88   :     }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
