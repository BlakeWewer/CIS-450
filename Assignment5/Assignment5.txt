	CS450			Spring, 2018
     Assignment 5

Due: 12:20pm on 4/20 (Friday)
This is a group assignment of 2 or 3 students.

You have learned the relationship between various C constructs and corresponding assembly codes generated by several C compilers for X86 and X64.
The goal of this course is not to become a specialist in compiler generated codes of one particular compiler for one particular machine.
Rather, the goal is to master the fundamentals of high level language constructs and corresponding machine instructions to understand details of how a machine carries out executions of programs written in C (and hopefully other high level languages).
This means that you should be able to apply your knowledge to any C construct in any C compiler for any machine to understand the run-time behavior of programs written in C language.

In the first step to this goal, you will analyze the switch statement in the C language in this assignment.
I have prepared four programs using switch statements.
Compile these programs to generate assembly (.cod) files using VC++ compiler for X86, as follows:
 1. run Visual Studio 2017, x86 Native Tools Command Prompt
 2. change directories to the target directory that holds these programs.
 3. execute the VC++ compiler by typing the following command
    > cl /FAcs /Od file.c

Then, read and analyze these assembly programs and derive rules for assembly codes for switch statements.

Suppose that you are an instructor of this course and that you must explain your findings to the students in class.
Develop power point slides (in .ppt(x)) and write supplemental explanations (in .doc(x)) to explain your findings.
We will grade your submission based on (1) accuracy and (2) easiness to understand.
You can use provided programs and their assembly codes in your slides or documents.  
You can also add your own programs or replace the provided programs with your own programs.
In any case, you must use code examples (and hopefully some figures) to make your discussions at code level.

Note: Explanations for operation "npad" are (from http://masm32.com/board/index.php?topic=1885.0)
1. one person states "npad is just repeated NOP instructions used for alignment" , but
2. another person states "npad is a macro defined in listing.inc in your VC include folder, and it inserts "non destructive" operations rather than just a series of NOP. For instance, the npad 6 from your example should be "lea ebx, [ebx+0]".
where NOP is "no operation" that does nothing.
In either way, you can ignore the operation

How to submit:
You need to submit (1) slides (.ppt(x)file), and (2) documents (.doc or .txt file)
Make sure to list the names of all students in the group in both slides and documents,
1. Make a top-level submission directory after LastName_FirstName of one of the students (call her/him the leader) in the group.
2. Put both slide and document files in the top-level directory
3. Zip the top-level directory
4. Submit the zip file in the leader's account in KSOL
